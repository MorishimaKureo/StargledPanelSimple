<!DOCTYPE html>
<html>
<head>
    <title>File Manager - Minecraft Server Panel</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/css/global.css">
</head>
<body>
    <%- include('partials/sidebar', { page: page }) %>
    <%- include('partials/header') %>
    <div id="main-content">
        <h1>File Manager</h1>
        <div id="current-path" style="margin-bottom:10px;font-size:14px;color:#888;"></div>
        <button id="back-btn" style="display:none;margin-bottom:10px;">⬅ Back</button>
        <button id="new-file-btn" style="margin-bottom:10px;">New File</button>
        <button id="new-folder-btn" style="margin-bottom:10px;">New Folder</button>
        <form id="upload-form" enctype="multipart/form-data" style="margin-bottom:15px;display:inline;">
            <button type="button" id="upload-btn">Upload File</button>
            <input type="file" id="hidden-file-input" name="file" style="display:none;" required />
        </form>
        <div id="file-list"></div>
    </div>

    <!-- Modal for entering name -->
    <div id="name-modal" style="display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.4);z-index:1000;align-items:center;justify-content:center;">
        <div style="background:#fff;padding:20px;border-radius:8px;min-width:300px;max-width:90vw;">
            <h3 id="modal-title"></h3>
            <input type="text" id="modal-input" style="width:100%;margin-bottom:10px;" />
            <div style="text-align:right;">
                <button id="modal-cancel">Cancel</button>
                <button id="modal-ok">OK</button>
            </div>
        </div>
    </div>

    <%- include('partials/footer') %>
    <script>
        let currentPath = '';

        function fetchFiles() {
            fetch(`/files?path=${encodeURIComponent(currentPath)}`)
                .then(res => res.json())
                .then(data => {
                    const files = data.files;
                    const list = document.getElementById('file-list');
                    list.innerHTML = '';
                    document.getElementById('current-path').textContent = '/' + (data.currentPath || '');
                    document.getElementById('back-btn').style.display = data.currentPath ? '' : 'none';

                    if (files.length === 0) {
                        list.textContent = 'No files found.';
                    } else {
                        files.forEach(file => {
                            const div = document.createElement('div');
                            div.className = 'file-item';

                            // Icon for file/folder
                            const iconSpan = document.createElement('span');
                            iconSpan.style.marginRight = '8px';
                            iconSpan.textContent = file.isDirectory ? '📁' : '📄';
                            div.appendChild(iconSpan);

                            // File/folder name
                            const nameSpan = document.createElement('span');
                            nameSpan.className = 'file-name';
                            nameSpan.textContent = file.name;
                            if (file.isDirectory) {
                                nameSpan.style.fontWeight = 'bold';
                                nameSpan.style.cursor = 'pointer';
                                nameSpan.onclick = () => {
                                    currentPath = currentPath ? currentPath + '/' + file.name : file.name;
                                    fetchFiles();
                                };
                            } else {
                                // Add onclick event to open file for editing
                                nameSpan.style.cursor = 'pointer';
                                nameSpan.onclick = () => {
                                    window.location.href = `/edit?file=${encodeURIComponent((currentPath ? currentPath + '/' : '') + file.name)}`;
                                };
                            }
                            div.appendChild(nameSpan);

                            // Triple dot button
                            const menuBtn = document.createElement('button');
                            menuBtn.className = 'action-menu-btn';
                            menuBtn.innerHTML = '&#8942;';
                            div.appendChild(menuBtn);

                            // Action menu
                            const menu = document.createElement('div');
                            menu.className = 'action-menu';

                            // Rename
                            const renameBtn = document.createElement('button');
                            renameBtn.textContent = 'Rename';
                            renameBtn.onclick = (e) => {
                                e.stopPropagation();
                                hideAllMenus();
                                showModal(`Rename "${file.name}" to:`, function(newName) {
                                    if (!newName || newName === file.name) return;
                                    fetch('/rename', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ oldName: (currentPath ? currentPath + '/' : '') + file.name, newName })
                                    })
                                    .then(res => {
                                        if (res.ok) fetchFiles();
                                        else res.text().then(msg => alert(msg));
                                    });
                                });
                            };
                            menu.appendChild(renameBtn);

                            // Remove the Edit button
                            // Only show Download for files (not folders)
                            if (!file.isDirectory) {
                                const downloadBtn = document.createElement('button');
                                downloadBtn.textContent = 'Download';
                                downloadBtn.onclick = (e) => {
                                    e.stopPropagation();
                                    hideAllMenus();
                                    window.open(`/download?file=${encodeURIComponent((currentPath ? currentPath + '/' : '') + file.name)}`);
                                };
                                menu.appendChild(downloadBtn);
                            }

                            // Delete
                            const deleteBtn = document.createElement('button');
                            deleteBtn.textContent = 'Delete';
                            deleteBtn.onclick = (e) => {
                                e.stopPropagation();
                                hideAllMenus();
                                if (confirm(`Delete ${file.name}?`)) {
                                    fetch(`/delete?file=${encodeURIComponent((currentPath ? currentPath + '/' : '') + file.name)}`, { method: 'DELETE' })
                                        .then(res => {
                                            if (res.ok) fetchFiles();
                                            else alert('Failed to delete file');
                                        });
                                }
                            };
                            menu.appendChild(deleteBtn);

                            div.appendChild(menu);

                            // Show/hide menu logic
                            menuBtn.onclick = function(e) {
                                e.stopPropagation();
                                hideAllMenus();
                                menu.classList.toggle('show');
                            };

                            // Hide menu when clicking outside
                            document.addEventListener('click', hideAllMenus);
                            function hideAllMenus() {
                                document.querySelectorAll('.action-menu.show').forEach(m => m.classList.remove('show'));
                            }

                            list.appendChild(div);
                        });
                    }
                });
        }

        document.getElementById('back-btn').onclick = function() {
            if (!currentPath) return;
            const parts = currentPath.split('/');
            parts.pop();
            currentPath = parts.join('/');
            fetchFiles();
        };

        fetchFiles();

        // Modal logic
        let modalCallback = null;
        function showModal(title, callback) {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-input').value = '';
            document.getElementById('name-modal').style.display = 'flex';
            modalCallback = callback;
            setTimeout(() => document.getElementById('modal-input').focus(), 100);
        }
        function hideModal() {
            document.getElementById('name-modal').style.display = 'none';
            modalCallback = null;
        }
        document.getElementById('modal-cancel').onclick = hideModal;
        document.getElementById('modal-ok').onclick = function() {
            if (modalCallback) {
                modalCallback(document.getElementById('modal-input').value.trim());
            }
            hideModal();
        };
        document.getElementById('modal-input').addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                document.getElementById('modal-ok').click();
            }
        });

        // New File button
        document.getElementById('new-file-btn').onclick = function() {
            showModal('Enter new file name', function(name) {
                if (!name) return;
                fetch('/create-file', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ fileName: name })
                })
                .then(res => {
                    if (res.ok) fetchFiles();
                    else res.text().then(msg => alert(msg));
                });
            });
        };

        // New Folder button
        document.getElementById('new-folder-btn').onclick = function() {
            showModal('Enter new folder name', function(name) {
                if (!name) return;
                fetch('/create-folder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ folderName: name })
                })
                .then(res => {
                    if (res.ok) fetchFiles();
                    else res.text().then(msg => alert(msg));
                });
            });
        };

        // Handle upload file
        document.getElementById('upload-btn').onclick = function() {
            document.getElementById('hidden-file-input').click();
        };

        document.getElementById('hidden-file-input').addEventListener('change', function() {
            if (!this.files.length) return;
            const formData = new FormData();
            formData.append('file', this.files[0]);
            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(res => {
                if (res.ok) {
                    fetchFiles();
                    this.value = '';
                } else {
                    res.text().then(msg => alert(msg));
                }
            });
        });

        // Remove the old upload-form submit handler if present
        document.getElementById('upload-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(res => {
                if (res.ok) {
                    fetchFiles();
                    this.reset();
                } else {
                    res.text().then(msg => alert(msg));
                }
            });
        });
    </script>
</body>
</html>